unit UsersCore;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Libs, UsersListsCore;

type
  // classes should be in one file. i can get they and manage. so studyclass will be integer with class uuid
  // user types: pupil, parent, teacher, zavuch
  TForm10 = class(TForm)
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form10: TForm10;

function createUser(login, firstname, lastname, userType, ownClass, classes, studyClass, subject: string): boolean;
function getUser(const login: string): TUser;
function getUsersBySubject(const subject: string): UsersListsCore.TUsersList;

implementation

{$R *.dfm}

function createUser(login, firstname, lastname, userType, ownClass, classes, studyClass, subject: string): boolean;
var
  UsersList: UsersListsCore.TList;
  curr: UsersListsCore.PTListElement;
begin 
  //TODO remove userType param
//  if getUser(login).login <> '' then
//  begin
//    exit;
//  end;
  New(curr);
  UsersListsCore.LoadList(UsersList);
  curr^.data.userId := Libs.generateUUID();
  if Length(login) = 0 then
  begin
    curr^.data.login := curr^.data.userId;
  end
  else
  begin
    curr^.data.login := login;
  end;
   curr^.data.firstname := firstname;
   curr^.data.lastname := lastname;
   curr^.data.userType := userType;
   curr^.data.ownClassID := ownClass;
   curr^.data.classes := classes;
   curr^.data.studyClassID := studyClass;
   curr^.data.subject := subject;
   UsersListsCore.AddToEnd(UsersList, curr);
   UsersListsCore.SaveList(UsersList);
  Dispose(curr);
  Result := true;
  exit;
end;

function getUser(const login: string): TUser;
var
  i: integer;
  usersList: UsersListsCore.TList;
  curr: UsersListsCore.PTListElement;
begin
  UsersListsCore.LoadList(usersList);
  New(curr);
  curr.data.login := 'emptyuser';
  curr := usersList.head;
  while curr <> nil do
  begin
    if curr^.data.login = login then
    begin
      Result := curr^.data;
      exit;
    end;
    curr := curr^.next;
  end;
end;

function getUsersBySubject(const subject: string): TUsersList;
var
 i: integer;
 curr: UsersListsCore.PTListElement;
 usersList: UsersListsCore.TList;
 results: UsersListsCore.TUsersList;
begin
 New(curr);
 curr := usersList.head;
 while curr <> nil do
 begin
   if curr^.data.subject = subject then
   begin
     SetLength(results, Length(results)+1);
     results[High(result)] := curr^.data;
   end;
 end;
end;

// function checkExists()
end.
